                                Ex.No.: 3
Title : Implementation of Radial Basis Function Networks using PyTorch and Keras

1.	Implement Radial Basis Function Network in PyTorch Framework for Heart 
    disease prediction

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Load data
X, y = load_iris(return_X_y=True)

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, 
                random_state=42)

# Scale data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Find centers using K-means clustering
num_centers = 3
kmeans = KMeans(n_clusters=num_centers, random_state=42).fit(X_train)
centers = kmeans.cluster_centers_

# Define RBF layer
class RBFLayer(keras.layers.Layer):
    def __init__(self, num_centers):
        super(RBFLayer, self).__init__()
        self.num_centers = num_centers
        self.centers = self.add_weight(name='centers', shape=(self.num_centers,
                 X_train.shape[1]), initializer='uniform', trainable=True)
        self.widths = self.add_weight(name='widths', shape=(self.num_centers,), 
                initializer='ones', trainable=True)
        self.linear = layers.Dense(units=1, activation=None)
    
    def radial(self, X):
        X = tf.expand_dims(X, axis=1)
        centers = tf.expand_dims(self.centers, axis=0)
        dist = tf.reduce_sum(tf.square(X - centers), axis=-1)
        return tf.exp(-dist / (2 * tf.square(self.widths)))
    
    def call(self, X):
        radial_output = self.radial(X)
        return self.linear(radial_output)

# Define RBF network
model = keras.Sequential([
    RBFLayer(num_centers),
])

# Compile model
model.compile(optimizer='adam', loss='mse', metrics=['accuracy'])

# Train model
model.fit(X_train, y_train, epochs=500, batch_size=32, verbose=2)

# Evaluate model on test set
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Accuracy: {test_acc:.4f}")


2.	Write a Python program using Keras and Tensorflow for RBF network 
    implementation. 
Use K-means for finding ceters in RBF.

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load data
X, y = load_iris(return_X_y=True)

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
                                     random_state=42)

# Scale data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define RBF layer
class RBF(nn.Module):
    def __init__(self, num_centers, in_features, out_features):
        super().__init__()
        self.centers = nn.Parameter(torch.randn(num_centers, in_features))
        self.widths = nn.Parameter(torch.randn(num_centers))
        self.linear = nn.Linear(num_centers, out_features)
    
    def radial(self, X):
        dist = torch.sum((X[:, None, :] - self.centers[None, :, :]) ** 2, 
                dim=2)
        return torch.exp(-dist / (2 * self.widths ** 2))
    
    def forward(self, X):
        radial_output = self.radial(X)
        return self.linear(radial_output)

# Define RBF network
class RBFNetwork(nn.Module):
    def __init__(self, num_centers, in_features, out_features):
        super().__init__()
        self.rbf = RBF(num_centers, in_features, out_features)
    
    def forward(self, X):
        return self.rbf(X)

# Define training loop
def train(model, X, y, optimizer, criterion, num_epochs):
    for epoch in range(num_epochs):
        optimizer.zero_grad()
        outputs = model(X)
        loss = criterion(outputs, y)
        loss.backward()
        optimizer.step()
        if (epoch + 1) % 100 == 0:
            print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}")

# Define model hyperparameters
num_centers = 10
in_features = X_train.shape[1]
out_features = 1
learning_rate = 0.1
num_epochs = 1000

# Initialize model, optimizer, and loss function
model = RBFNetwork(num_centers, in_features, out_features)
optimizer = optim.SGD(model.parameters(), lr=learning_rate)
criterion = nn.MSELoss()

# Train model
train(model, torch.tensor(X_train).float(), torch.tensor(y_train).float(), 
        optimizer, criterion, num_epochs)

# Evaluate model on test set
with torch.no_grad():
    y_pred = model(torch.tensor(X_test).float())
    y_pred_class = (y_pred > 0.5).float()
accuracy = torch.mean((y_pred_class == torch.tensor(y_test).float()).float())
    print(f"Test Accuracy: {accuracy.item():.4f}")

